(()=>{"use strict";(()=>{eval("\n\nconst DEBOUNCE_INTERVAL = 500;\n\nconst Keys = {\n  ENTER: {\n    keyName: `Enter`\n  },\n  ESCAPE: {\n    keyName: `Escape`\n  }\n};\n\nconst getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomFromArray = (arr) => {\n  return arr[getRandomInt(0, arr.length - 1)];\n};\n\nconst getShuffledArray = (arr) => {\n  const randomComparator = () => {\n    return 0.5 - Math.random();\n  };\n  return arr.slice().sort(randomComparator);\n};\n\nconst onEscPress = (evt, action) => {\n  if (evt.key === Keys.ESCAPE.keyName) {\n    evt.preventDefault();\n    action();\n  }\n};\n\nconst onEnterPress = (evt, action) => {\n  if (evt.key === Keys.ENTER.keyName) {\n    action(evt);\n  }\n};\n\nconst debounce = (callback) => {\n  let lastTimeout = null;\n\n  return (...args) => {\n    if (lastTimeout) {\n      window.clearTimeout(lastTimeout);\n    }\n    lastTimeout = window.setTimeout(() => {\n      callback(...args);\n    }, DEBOUNCE_INTERVAL);\n  };\n};\n\nwindow.util = {\n  getRandomInt,\n  getRandomFromArray,\n  getShuffledArray,\n  onEscPress,\n  onEnterPress,\n  debounce\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/util.js?")})(),(()=>{eval("\n\nconst VISIBLE_COMMENTS_COUNTER_REGEX = /^\\d+/;\nconst DEFAULT_COMMENTS_QUANTITY = 5;\n\nconst pictureElement = document.querySelector(`.big-picture`);\nconst comments = pictureElement.querySelector(`.social__comments`);\nconst commentsLoader = pictureElement.querySelector(`.social__comments-loader`);\nconst visibleCommentsCounter = pictureElement.querySelector(`.social__comment-count`);\n\nconst onShowMoreCommentsClick = () => {\n\n  const hiddenComments = comments.querySelectorAll(`.hidden`);\n  const currentVisibleCounter = parseInt(visibleCommentsCounter.innerHTML.match(VISIBLE_COMMENTS_COUNTER_REGEX)[0], 10);\n\n  if (hiddenComments.length) {\n    const cutoff = hiddenComments.length < DEFAULT_COMMENTS_QUANTITY ? hiddenComments.length : DEFAULT_COMMENTS_QUANTITY;\n\n    for (let i = 0; i < cutoff; i++) {\n      hiddenComments[i].classList.remove(`hidden`);\n    }\n\n    if (cutoff < DEFAULT_COMMENTS_QUANTITY) {\n      commentsLoader.classList.add(`hidden`);\n    }\n\n    visibleCommentsCounter.innerHTML = visibleCommentsCounter.innerHTML.replace(VISIBLE_COMMENTS_COUNTER_REGEX, currentVisibleCounter + cutoff);\n  }\n};\n\nconst renderComments = (commentsArray) => {\n  const commentElement = comments.querySelector(`.social__comment`);\n  const fragment = document.createDocumentFragment();\n\n  commentsArray.forEach((comment, index) => {\n    const record = commentElement.cloneNode(true);\n    const avatar = record.querySelector(`.social__picture`);\n    const message = record.querySelector(`.social__text`);\n\n    avatar.src = comment.avatar;\n    avatar.alt = comment.name;\n    message.textContent = comment.message;\n\n    if (index >= DEFAULT_COMMENTS_QUANTITY) {\n      record.classList.add(`hidden`);\n    }\n\n    fragment.appendChild(record);\n  });\n\n  if (commentsArray.length < DEFAULT_COMMENTS_QUANTITY) {\n    const commentsCount = pictureElement.querySelector(`.comments-count`).textContent;\n    visibleCommentsCounter.innerHTML = visibleCommentsCounter.innerHTML.replace(VISIBLE_COMMENTS_COUNTER_REGEX, commentsCount);\n    commentsLoader.classList.add(`hidden`);\n  } else {\n    visibleCommentsCounter.innerHTML = visibleCommentsCounter.innerHTML.replace(VISIBLE_COMMENTS_COUNTER_REGEX, DEFAULT_COMMENTS_QUANTITY);\n    commentsLoader.classList.remove(`hidden`);\n  }\n\n  commentsLoader.addEventListener(`click`, onShowMoreCommentsClick);\n  commentsLoader.addEventListener(`keydown`, onShowMoreCommentsEnterPress);\n\n  comments.innerHTML = ``;\n  comments.appendChild(fragment);\n};\n\nconst renderPicture = (data) => {\n\n  const image = pictureElement.querySelector(`.big-picture__img img`);\n  const likesCount = pictureElement.querySelector(`.likes-count`);\n  const commentsCount = pictureElement.querySelector(`.comments-count`);\n  const description = pictureElement.querySelector(`.social__caption`);\n  const closeModal = pictureElement.querySelector(`.big-picture__cancel`);\n\n  image.src = data.url;\n  likesCount.textContent = data.likes;\n  commentsCount.textContent = data.comments.length;\n  description.textContent = data.description;\n  renderComments(data.comments);\n\n  document.body.classList.add(`modal-open`);\n  pictureElement.classList.remove(`hidden`);\n\n  document.addEventListener(`keydown`, onPictureEscPress);\n  closeModal.addEventListener(`click`, onPictureCloseClick);\n};\n\nconst showPreview = (thumbnail, data) => {\n  const container = document.querySelector(`.pictures`);\n  const collection = container.querySelectorAll(`.picture`);\n\n  for (let i = 0; i <= collection.length; i++) {\n    if (collection[i] === thumbnail) {\n      renderPicture(data[i]);\n      break;\n    }\n  }\n};\n\nconst onPictureCloseClick = () => {\n  pictureElement.classList.add(`hidden`);\n  document.body.classList.remove(`modal-open`);\n};\n\nconst onPictureEscPress = (evt) => {\n  window.util.onEscPress(evt, onPictureCloseClick);\n};\n\nconst onShowMoreCommentsEnterPress = (evt) => {\n  window.util.onEnterPress(evt, onShowMoreCommentsClick);\n};\n\nwindow.picture = {\n  showPreview\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/picture.js?")})(),(()=>{eval("\n\nconst TIMEOUT = 10000;\n\nconst StatusCode = {\n  OK: 200\n};\n\nconst Url = {\n  SAVE: `https://21.javascript.pages.academy/kekstagram`,\n  LOAD: `https://21.javascript.pages.academy/kekstagram/data`\n};\n\nconst createRequest = (method, url, onLoad, onError) => {\n  let xhr = new XMLHttpRequest();\n  xhr.responseType = `json`;\n\n  xhr.addEventListener(`load`, () => {\n    switch (xhr.status) {\n      case StatusCode.OK:\n        onLoad(xhr.response);\n        break;\n      default:\n        onError(`Статус ответа: ${xhr.status} - ${xhr.statusText}`);\n    }\n  });\n\n  xhr.addEventListener(`error`, () => {\n    onError(`Ошибка соединения`);\n  });\n\n  xhr.addEventListener(`timeout`, () => {\n    onError(`Таймаут: ${xhr.timeout} мс.`);\n  });\n\n  xhr.timeout = TIMEOUT;\n  xhr.open(method, url);\n\n  return xhr;\n};\n\nconst load = (onSuccess, onError) => {\n  let xhr = createRequest(`GET`, Url.LOAD, onSuccess, onError);\n  xhr.send();\n};\n\nconst save = (data, onSuccess, onError) => {\n  let xhr = createRequest(`POST`, Url.SAVE, onSuccess, onError);\n  xhr.send(data);\n};\n\nwindow.backend = {\n  load,\n  save\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/backend.js?")})(),(()=>{eval("\n\nlet initialPhotos;\nlet filteredPhotos;\n\nconst thumbnails = document.querySelector(`.pictures`);\nconst photoTemplate = document.querySelector(`#picture`)\n    .content\n    .querySelector(`.picture`);\n\nconst renderPhoto = (obj) => {\n  const photo = photoTemplate.cloneNode(true);\n  const image = photo.querySelector(`.picture__img`);\n  const comments = photo.querySelector(`.picture__comments`);\n  const likes = photo.querySelector(`.picture__likes`);\n\n  image.src = obj.url;\n  likes.textContent = obj.likes;\n  comments.textContent = obj.comments.length;\n\n  return photo;\n};\n\nconst renderPhotos = (photosArray) => {\n  const previousThumbnails = thumbnails.querySelectorAll(`.picture`);\n  const fragment = document.createDocumentFragment();\n\n  if (previousThumbnails) {\n    previousThumbnails.forEach((thumbnail) => {\n      thumbnail.parentNode.removeChild(thumbnail);\n    });\n  }\n\n  photosArray.forEach((photo) => {\n    fragment.appendChild(renderPhoto(photo));\n  });\n\n  thumbnails.appendChild(fragment);\n};\n\nconst onPictureEnterPress = (evt) => {\n  evt.preventDefault();\n  if (evt.target.className === `picture`) {\n    window.picture.showPreview(evt.target,\n        window.thumbnails.filteredPhotos ? window.thumbnails.filteredPhotos : window.thumbnails.initialPhotos);\n  }\n};\n\nthumbnails.addEventListener(`click`, (evt) => {\n  if (evt.target.className === `picture__img`) {\n    window.picture.showPreview(evt.target.parentNode,\n        window.thumbnails.filteredPhotos ? window.thumbnails.filteredPhotos : window.thumbnails.initialPhotos);\n  }\n});\n\nthumbnails.addEventListener(`keydown`, (evt) => {\n  window.util.onEnterPress(evt, onPictureEnterPress);\n});\n\nwindow.thumbnails = {\n  initialPhotos,\n  filteredPhotos,\n  renderPhotos\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/thumbnails.js?")})(),(()=>{eval("\n\nconst renderPopup = (type, message, buttonTitle) => {\n  const popupTemplate = document.querySelector(`#${type}`)\n      .content\n      .querySelector(`.${type}`);\n\n  const popupParent = document.querySelector(`main`);\n  const popupElement = popupTemplate.cloneNode(true);\n\n  const popup = {\n    title: popupElement.querySelector(`.${type}__title`),\n    button: popupElement.querySelector(`.${type}__button`)\n  };\n\n  if (message) {\n    popup.title.textContent = message;\n  }\n\n  if (buttonTitle) {\n    popup.button.textContent = buttonTitle;\n  }\n\n  const onPopupEscPress = (evt) => {\n    window.util.onEscPress(evt, onPopupCloseClick);\n  };\n\n  const onPopupCloseClick = (evt) => {\n\n    if (evt && type === `error`) {\n      evt.preventDefault();\n      if (evt.target.className === `${type}` ||\n            evt.target.className === `${type}__button`) {\n        popupParent.removeChild(popupElement);\n      } else {\n        return;\n      }\n    } else {\n      popupParent.removeChild(popupElement);\n    }\n\n    document.removeEventListener(`click`, onPopupCloseClick);\n    document.removeEventListener(`keydown`, onPopupEscPress);\n  };\n\n  popupParent.appendChild(popupElement);\n\n  popup.button.focus();\n\n  popup.button.addEventListener(`keydown`, (evt) => {\n    window.util.onEnterPress(evt, onPopupCloseClick);\n  });\n\n  document.addEventListener(`keydown`, onPopupEscPress);\n  document.addEventListener(`click`, onPopupCloseClick);\n};\n\nwindow.popup = {\n  renderPopup\n};\n\n\n\n//# sourceURL=webpack://kekstagram/./js/popup.js?")})(),(()=>{eval("\n\nconst onSuccess = (loadedPhotosArray) => {\n  window.thumbnails.initialPhotos = loadedPhotosArray;\n  window.thumbnails.renderPhotos(loadedPhotosArray);\n  window.filter.show();\n};\n\nconst onError = (errorMessage) => {\n  window.popup.renderPopup(`error`, errorMessage, `Закрыть`);\n};\n\nwindow.backend.load(onSuccess, onError);\n\n\n//# sourceURL=webpack://kekstagram/./js/main.js?")})(),(()=>{eval("\n\nconst RANDOM_PHOTO_QUANTITY = 10;\n\nconst filterForm = document.querySelector(`.img-filters__form`);\n\nconst getFilteredPhotos = (filterType) => {\n  const checkedButton = filterForm.querySelector(`.img-filters__button--active`);\n  const activeFilter = filterForm.querySelector(`#${filterType}`);\n\n  checkedButton.classList.remove(`img-filters__button--active`);\n  activeFilter.classList.add(`img-filters__button--active`);\n\n  switch (filterType) {\n    case `filter-random`:\n      const randomArray = window.util.getShuffledArray(window.thumbnails.initialPhotos);\n      return randomArray.slice(0, RANDOM_PHOTO_QUANTITY);\n    case `filter-discussed`:\n      return window.thumbnails.initialPhotos.slice().sort((left, right) => right.comments.length - left.comments.length);\n    default:\n      return window.thumbnails.initialPhotos;\n  }\n};\n\nconst filterPhotos = window.util.debounce((evt) => {\n  window.thumbnails.filteredPhotos = getFilteredPhotos(evt.target.id);\n  window.thumbnails.renderPhotos(window.thumbnails.filteredPhotos);\n});\n\nconst show = () => {\n  filterForm.parentElement.classList.remove(`img-filters--inactive`);\n  filterForm.addEventListener(`click`, (evt) => filterPhotos(evt));\n};\n\nwindow.filter = {\n  show\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/filter.js?")})(),(()=>{eval("\n\nconst imgUpload = document.querySelector(`.img-upload`);\n\nconst SCALE_FACTOR_REGEX = /(\\d+)/;\nconst Zoom = {\n  STEP: 25,\n  LIMIT: 100\n};\n\nconst form = {\n  imgUploadPreview: imgUpload.querySelector(`.img-upload__preview img`),\n  effectSlider: imgUpload.querySelector(`.img-upload__effect-level`),\n  effectLevelPin: imgUpload.querySelector(`.effect-level__pin`),\n  effectLevelLine: imgUpload.querySelector(`.effect-level__line`),\n  effectLevelDepth: imgUpload.querySelector(`.effect-level__depth`),\n  effectLevelValue: imgUpload.querySelector(`.effect-level__value`),\n  scaleValue: imgUpload.querySelector(`.scale__control--value`)\n};\n\nconst setScaleFactor = (evt) => {\n  let value = parseInt(form.scaleValue.value.match(SCALE_FACTOR_REGEX)[0], 10);\n\n  if (evt) {\n    switch (true) {\n      case evt.target.classList.contains(`scale__control--bigger`):\n        value += Zoom.STEP;\n        break;\n      case evt.target.classList.contains(`scale__control--smaller`):\n        value -= Zoom.STEP;\n        break;\n    }\n  } else {\n    value = Zoom.LIMIT;\n  }\n\n  if (value > Zoom.LIMIT) {\n    value = Zoom.LIMIT;\n  } else if (value < Zoom.STEP) {\n    value = Zoom.STEP;\n  }\n\n  form.scaleValue.value = `${value} %`;\n  form.imgUploadPreview.style.transform = `scale(${value / 100})`;\n};\n\nconst getCurrentPinPosition = () => {\n  const position = {\n    width: form.effectLevelLine.clientWidth,\n    depth: form.effectLevelDepth.clientWidth\n  };\n  return position.depth / position.width;\n};\n\nconst setMaxPinPosition = () => {\n  const maxPinPosition = form.effectLevelLine.clientWidth;\n  form.effectLevelPin.style.left = `${maxPinPosition}px`;\n  form.effectLevelDepth.style.width = `${maxPinPosition}px`;\n  form.effectLevelValue.value = `100`;\n};\n\nconst onSetEffectIntencity = () => {\n  const pinPosition = getCurrentPinPosition();\n  const percentValue = (pinPosition.toFixed(2) * 100);\n  const intervalZeroOne = pinPosition.toFixed(1);\n  const intervalZeroThree = (3 / 100) * (pinPosition.toFixed(2) * 100);\n  const intervalOneThree = (2 / 100) * (pinPosition.toFixed(2) * 100) + 1;\n\n  switch (true) {\n    case form.imgUploadPreview.classList.contains(`effects__preview--chrome`):\n      form.imgUploadPreview.style.filter = `grayscale(${intervalZeroOne})`;\n      break;\n    case form.imgUploadPreview.classList.contains(`effects__preview--sepia`):\n      form.imgUploadPreview.style.filter = `sepia(${intervalZeroOne})`;\n      break;\n    case form.imgUploadPreview.classList.contains(`effects__preview--marvin`):\n      form.imgUploadPreview.style.filter = `invert(${percentValue}%)`;\n      break;\n    case form.imgUploadPreview.classList.contains(`effects__preview--phobos`):\n      form.imgUploadPreview.style.filter = `blur(${intervalZeroThree}px)`;\n      break;\n    case form.imgUploadPreview.classList.contains(`effects__preview--heat`):\n      form.imgUploadPreview.style.filter = `brightness(${intervalOneThree})`;\n      break;\n    default:\n      form.imgUploadPreview.style.filter = ``;\n  }\n\n  form.effectLevelValue.value = percentValue;\n};\n\nconst resetEffect = () => {\n  form.imgUploadPreview.className = ``;\n  form.imgUploadPreview.style.filter = ``;\n};\n\nconst setEffectStyle = (target) => {\n  switch (true) {\n    case target.matches(`#effect-chrome`):\n      resetEffect();\n      form.effectSlider.classList.remove(`hidden`);\n      form.imgUploadPreview.classList.add(`effects__preview--chrome`);\n      break;\n    case target.matches(`#effect-sepia`):\n      resetEffect();\n      form.effectSlider.classList.remove(`hidden`);\n      form.imgUploadPreview.classList.add(`effects__preview--sepia`);\n      break;\n    case target.matches(`#effect-marvin`):\n      resetEffect();\n      form.effectSlider.classList.remove(`hidden`);\n      form.imgUploadPreview.classList.add(`effects__preview--marvin`);\n      break;\n    case target.matches(`#effect-phobos`):\n      resetEffect();\n      form.effectSlider.classList.remove(`hidden`);\n      form.imgUploadPreview.classList.add(`effects__preview--phobos`);\n      break;\n    case target.matches(`#effect-heat`):\n      resetEffect();\n      form.effectSlider.classList.remove(`hidden`);\n      form.imgUploadPreview.classList.add(`effects__preview--heat`);\n      break;\n    default:\n      resetEffect();\n      form.effectSlider.classList.add(`hidden`);\n      form.effectLevelValue.value = ``;\n  }\n  form.effectLevelPin.addEventListener(`mouseup`, onSetEffectIntencity);\n};\n\nconst onEffectsChange = (evt) => {\n  setEffectStyle(evt.target);\n  setMaxPinPosition();\n  onSetEffectIntencity();\n};\n\nwindow.effects = {\n  form,\n  onEffectsChange,\n  onSetEffectIntencity,\n  setScaleFactor,\n  resetEffect\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/effects.js?")})(),(()=>{eval("\n\nwindow.effects.form.effectLevelPin.addEventListener(`mousedown`, (evt) => {\n  evt.preventDefault();\n\n  const lineWidth = window.effects.form.effectLevelLine.clientWidth;\n  const startCoords = {\n    x: evt.clientX,\n  };\n\n  let isDragged = false;\n\n  const onMouseMove = (moveEvt) => {\n    moveEvt.preventDefault();\n\n    isDragged = true;\n\n    const shift = {\n      x: startCoords.x - moveEvt.clientX,\n    };\n\n    startCoords = {\n      x: moveEvt.clientX,\n    };\n\n    const pointerPosition = window.effects.form.effectLevelPin.offsetLeft - shift.x;\n\n    if (pointerPosition >= 0) {\n      if (pointerPosition === 0) {\n        window.effects.form.effectLevelPin.style.left = `0`;\n        window.effects.form.effectLevelDepth.style.width = `0`;\n      } else if (pointerPosition <= lineWidth) {\n        window.effects.form.effectLevelPin.style.left = `${pointerPosition}px`;\n        window.effects.form.effectLevelDepth.style.width = `${pointerPosition}px`;\n      }\n      window.effects.onSetEffectIntencity(moveEvt);\n    }\n  };\n\n  const onMouseUp = (upEvt) => {\n    upEvt.preventDefault();\n\n    document.removeEventListener(`mousemove`, onMouseMove);\n    document.removeEventListener(`mouseup`, onMouseUp);\n\n    if (isDragged) {\n      const onClickPreventDefault = (clickEvt) => {\n        clickEvt.preventDefault();\n        window.effects.form.effectLevelPin.removeEventListener(`click`, onClickPreventDefault);\n      };\n      window.effects.form.effectLevelPin.addEventListener(`click`, onClickPreventDefault);\n    }\n  };\n\n  document.addEventListener(`mousemove`, onMouseMove);\n  document.addEventListener(`mouseup`, onMouseUp);\n});\n\n\n//# sourceURL=webpack://kekstagram/./js/set-effect.js?")})(),(()=>{eval('\n\nconst HASHTAG_REGEX = /^#[a-zA-Zа-яА-Я|\\d]+$/;\n\nconst HashtagParams = {\n  MAX_TAGS: 5,\n  MIN_LENGTH: 1,\n  MAX_LENGTH: 20\n};\n\nconst imgUpload = document.querySelector(`.img-upload`);\nconst hashtagInput = imgUpload.querySelector(`.text__hashtags`);\n\nconst hasDuplicates = (arr) => {\n  return new Set(arr).size !== arr.length;\n};\n\nconst checkHashtags = () => {\n  if (hashtagInput.value) {\n    const tags = hashtagInput.value.trim().toLowerCase().split(` `);\n    if (tags.length > HashtagParams.MAX_TAGS) {\n      hashtagInput.setCustomValidity(`Количество хэштэгов не должно превышать 5`);\n    } else if (hasDuplicates(tags)) {\n      hashtagInput.setCustomValidity(`Хэштэги не должны повторяться`);\n    } else {\n      tags.forEach((tag) => {\n        if (tag.length === HashtagParams.MIN_LENGTH) {\n          hashtagInput.setCustomValidity(`Длина хэштэга "${tag}" не должна быть меньше ${HashtagParams.MIN_LENGTH}`);\n        } else if (tag.length > HashtagParams.MAX_LENGTH) {\n          hashtagInput.setCustomValidity(`Длина хэштэга "${tag}" не должна быть больше ${HashtagParams.MAX_LENGTH}`);\n        } else if (!HASHTAG_REGEX.test(tag)) {\n          hashtagInput.setCustomValidity(`Хэштэг "${tag}" не соответствует правилам оформления`);\n        }\n      });\n    }\n  } else {\n    hashtagInput.setCustomValidity(``);\n  }\n  hashtagInput.reportValidity();\n};\n\nconst clearHashtagValidity = () => {\n  hashtagInput.setCustomValidity(``);\n  hashtagInput.reportValidity();\n  hashtagInput.classList.remove(`text--errors`);\n};\n\nwindow.validate = {\n  checkHashtags,\n  clearHashtagValidity\n};\n\n\n//# sourceURL=webpack://kekstagram/./js/validate.js?')})(),(()=>{eval("\n\nconst FILE_TYPES = [`gif`, `jpg`, `jpeg`, `png`, `bmp`];\n\nconst uploadStart = document.querySelector(`#upload-file`);\nconst uploadImgOverlay = document.querySelector(`.img-upload__overlay`);\nconst uploadCancel = document.querySelector(`#upload-cancel`);\nconst imgUpload = document.querySelector(`.img-upload`);\nconst formUpload = imgUpload.querySelector(`.img-upload__form`);\nconst uploadPreview = imgUpload.querySelector(`.img-upload__preview img`);\nconst effectsPreview = uploadImgOverlay.querySelectorAll(`.effects__preview`);\n\nconst form = {\n  hashtags: formUpload.querySelector(`.text__hashtags`),\n  description: formUpload.querySelector(`.text__description`),\n  effects: formUpload.querySelector(`.img-upload__effects`),\n  scaleButtons: formUpload.querySelectorAll(`.img-upload__scale button`),\n  submitButton: formUpload.querySelector(`.img-upload__submit`)\n};\n\nconst onUploadEscPress = (evt) => {\n  if (document.activeElement !== form.hashtags\n        && document.activeElement !== form.description) {\n    window.util.onEscPress(evt, closeUpload);\n  }\n};\n\nconst openUpload = () => {\n  uploadImgOverlay.classList.remove(`hidden`);\n  document.body.classList.add(`modal-open`);\n  window.effects.form.effectSlider.classList.add(`hidden`);\n\n  window.effects.setScaleFactor();\n  window.effects.resetEffect();\n  window.validate.clearHashtagValidity();\n  window.effects.form.effectLevelValue.value = ``;\n\n  form.effects.addEventListener(`change`, window.effects.onEffectsChange);\n  form.hashtags.addEventListener(`input`, onHashtagInputChange);\n  document.addEventListener(`keydown`, onUploadEscPress);\n\n  form.scaleButtons.forEach((button) => {\n    button.addEventListener(`click`, onScaleButtonClick);\n  });\n\n  formUpload.addEventListener(`submit`, onUploadFormSubmit);\n};\n\nconst closeUpload = () => {\n  uploadImgOverlay.classList.add(`hidden`);\n  document.body.classList.remove(`modal-open`);\n\n  uploadStart.value = ``;\n\n  form.effects.removeEventListener(`change`, window.effects.onEffectsChange);\n  form.hashtags.removeEventListener(`input`, onHashtagInputChange);\n  document.removeEventListener(`keydown`, onUploadEscPress);\n\n  form.scaleButtons.forEach((button) => {\n    button.removeEventListener(`click`, onScaleButtonClick);\n  });\n\n  formUpload.removeEventListener(`submit`, onUploadFormSubmit);\n};\n\nconst onHashtagInputChange = () => window.validate.clearHashtagValidity();\nconst onScaleButtonClick = (evt) => window.effects.setScaleFactor(evt);\n\nconst onUploadFormSubmit = (evt) => {\n  evt.preventDefault();\n\n  window.validate.checkHashtags();\n\n  if (!form.hashtags.validity.valid) {\n    form.hashtags.classList.add(`text--errors`);\n  } else {\n    window.backend.save(new FormData(formUpload), onUploadSuccess, onUploadError);\n  }\n};\n\nconst onUploadSuccess = () => {\n  uploadCancel.click();\n  window.popup.renderPopup(`success`);\n};\n\nconst onUploadError = (errorMessage) => {\n  uploadCancel.click();\n  window.popup.renderPopup(`error`, errorMessage);\n};\n\nuploadStart.addEventListener(`change`, () => {\n  const file = uploadStart.files[0];\n  const matches = FILE_TYPES.some((type) => file.type.endsWith(type));\n  if (matches) {\n    const reader = new FileReader();\n\n    reader.addEventListener(`load`, () => {\n      uploadPreview.src = reader.result;\n\n      effectsPreview.forEach((effect) => {\n        effect.style.backgroundImage = `url('${reader.result}')`;\n      });\n    });\n\n    reader.readAsDataURL(file);\n    openUpload();\n  }\n});\n\nuploadCancel.addEventListener(`click`, () => {\n  closeUpload();\n});\n\nuploadCancel.addEventListener(`keydown`, (evt) => {\n  window.util.onEnterPress(evt, closeUpload);\n});\n\nform.submitButton.addEventListener(`keydown`, (evt) => {\n  window.util.onEnterPress(evt, closeUpload);\n});\n\n\n//# sourceURL=webpack://kekstagram/./js/upload.js?")})()})();